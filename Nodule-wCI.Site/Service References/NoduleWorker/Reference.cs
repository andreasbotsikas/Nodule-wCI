//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18046
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nodule_wCI.Site.NoduleWorker {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NoduleWorker.IProcessor")]
    public interface IProcessor {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessor/ProcessRequest", ReplyAction="http://tempuri.org/IProcessor/ProcessRequestResponse")]
        bool ProcessRequest(long requestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessor/ProcessRequest", ReplyAction="http://tempuri.org/IProcessor/ProcessRequestResponse")]
        System.Threading.Tasks.Task<bool> ProcessRequestAsync(long requestId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessor/ProcessNewRequests", ReplyAction="http://tempuri.org/IProcessor/ProcessNewRequestsResponse")]
        bool ProcessNewRequests();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IProcessor/ProcessNewRequests", ReplyAction="http://tempuri.org/IProcessor/ProcessNewRequestsResponse")]
        System.Threading.Tasks.Task<bool> ProcessNewRequestsAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProcessor/StartProcessRequest")]
        void StartProcessRequest(long requestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProcessor/StartProcessRequest")]
        System.Threading.Tasks.Task StartProcessRequestAsync(long requestId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProcessor/StartProcessNewRequests")]
        void StartProcessNewRequests();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IProcessor/StartProcessNewRequests")]
        System.Threading.Tasks.Task StartProcessNewRequestsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IProcessorChannel : Nodule_wCI.Site.NoduleWorker.IProcessor, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessorClient : System.ServiceModel.ClientBase<Nodule_wCI.Site.NoduleWorker.IProcessor>, Nodule_wCI.Site.NoduleWorker.IProcessor {
        
        public ProcessorClient() {
        }
        
        public ProcessorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ProcessorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ProcessorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool ProcessRequest(long requestId) {
            return base.Channel.ProcessRequest(requestId);
        }
        
        public System.Threading.Tasks.Task<bool> ProcessRequestAsync(long requestId) {
            return base.Channel.ProcessRequestAsync(requestId);
        }
        
        public bool ProcessNewRequests() {
            return base.Channel.ProcessNewRequests();
        }
        
        public System.Threading.Tasks.Task<bool> ProcessNewRequestsAsync() {
            return base.Channel.ProcessNewRequestsAsync();
        }
        
        public void StartProcessRequest(long requestId) {
            base.Channel.StartProcessRequest(requestId);
        }
        
        public System.Threading.Tasks.Task StartProcessRequestAsync(long requestId) {
            return base.Channel.StartProcessRequestAsync(requestId);
        }
        
        public void StartProcessNewRequests() {
            base.Channel.StartProcessNewRequests();
        }
        
        public System.Threading.Tasks.Task StartProcessNewRequestsAsync() {
            return base.Channel.StartProcessNewRequestsAsync();
        }
    }
}
